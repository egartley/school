1) It would be better to use a linked list, since you're only removing from the front of the list, which would be O(1). Inserting through of all of the list, none of the variations would work better than any other, since you'll always need to traverse the list's contents to get to the index where you want to insert an item. An array-based list may not be better either, since you have to move all of the elements after the index down by 1 when not at the end.

2)
	a) beforetail = self.__find(self.__size - 2)
	   beforetail._next = self.__head
	   tail = beforetail._next
	   tail._next = self.__head._next
	   self.__head = tail
	b) Yes, because instead of having to use __find to get the tail, you'll only have to use self.__tail, which would reduce the running time from O(n) to O(1)

3)  size = self.__size
	even = size % 2 == 0
	current = self.__head._next
	if size == 0:
		return None
	elif size <= 2:
		return current
	for i in range((size // 2) + (0 if even else 1)):
		current = current._next
	return current